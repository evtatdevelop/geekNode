const readline = require('readline');
const cc = require("node-console-colors");
const fs = require('fs');

const stat = winer => fs.exists('./blackJack.json', exists => {
  if ( exists ) fs.readFile('./blackJack.json', (err, data) => {
    const stat = JSON.parse(data);
    stat[winer]++;  
    fs.writeFile('./blackJack.json', JSON.stringify(stat), (err) => {
      if ( err ) console.error(err);
    })
  })
})

const rl = readline.Interface({
  input: process.stdin,
  output: process.stdout
});

const casino = [];
const player = [];
const takenCards = new Set();

const getNewCard = () => {
  const cards = [2,3,4,5,6,7,8,9,10,'J','Q','K',"A"];
  const cardSuits = ['S', 'C', 'D', 'H']; // ['spades', 'clubs', 'diamonds', 'hearts']
  let newCard = null;
  while ( !newCard || takenCards.has(newCard) ) newCard = `${cardSuits[Math.floor(Math.random() * 4)]}${cards[Math.floor(Math.random() * 13)]}`;
  takenCards.add(newCard);
  return newCard;
}
const getCardWeight = card => {
  const jqka = {'J': 2, 'Q': 3, 'K': 4, 'A': 11};
  const cardWeight = card.slice(1);
  return !isNaN(cardWeight) ? +cardWeight : jqka[cardWeight];
}
const getCardSum = player => player.reduce((sum, cur) => sum = sum + getCardWeight(cur), 0)

const bust = player => getCardSum(player) > 21

const getWinner = () => {
  const casinoRate = getCardSum(casino);
  const playerRate = getCardSum(player);
  console.log('\n');
  if ( casinoRate > playerRate ) {
    console.log(`Casino winner`);
    stat('casino')
  } else if ( casinoRate === playerRate ) {
    console.log(`Draw`);
  } else {
    console.log(`You are a winner`);
    stat('player')
  }
  console.log(`You: ${getCardSum(player)}:`);
  showCards(player)
  console.log(`Casino:  ${getCardSum(casino)}:`);
  showCards(casino)
  rl.close();
}
const showCards = player => { 
  const color = {'S': 'fg_black', 'C': 'fg_black', 'D': 'fg_red', 'H': 'fg_red'};
  const simbol = {'S': '♠', 'C': '♣', 'D': '♦', 'H': '♥'};
  const cardSet = player.reduce((res, item) => res = `${res} ${cc.set(color[item[0]], "bg_dark_cyan", ' '+simbol[item[0]]+item.slice(1)+' ')}`, '');
  const cardBody = player.reduce((res, item) => res = `${res} ${cc.set("fg_dark_cyan", "bg_dark_cyan", +item.slice(1)===10?'     ':'    ')}`, '');
  console.log(cardBody);
  console.log(cardSet);
  console.log(cardBody);
}

let csinoInDeal = true;
const casinoStep = () => {
  csinoInDeal = csinoInDeal ? 21 >= getCardSum(casino) + Math.floor(Math.random() * 7) : csinoInDeal;
  return csinoInDeal;
}
const casinoDeal = () => {
  while ( casinoStep() ) {
    casino.push( getNewCard() );
    if ( bust(casino) ) {
      console.log(`\nOverkill at the casino. You are a winner`)
      stat('player')
    };
  }
  return !bust(casino)
}

console.log('let\'s play.. [y/n] ♣ ♠ ♥ ♦');

rl.on('line', line => {
  switch ( line ) {
    case 'y': case 'Y':      
      player.push( getNewCard() );
      showCards(player);
      if ( player.length ) console.log('More..? [y/n]');
      if ( bust(player) ) {
        console.log(`\nYou have too much. Casino winner`);
        stat('casino')
        rl.close();
        break;
      }

      if ( casinoStep() ) {
        casino.push( getNewCard() );
        if ( bust(casino) ) {
          console.log(`\nOverkill at the casino. You are a winner`);
          stat('player')
          rl.close();
        }        
      }
      break;

    case 'n': case 'N':
      if ( casinoDeal() ) getWinner();
      rl.close();
      break;
  }
});
